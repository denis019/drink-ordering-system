/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.drink.ordering.system.infrastructure.kafka.order.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrderAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8335027407454571229L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderAvroModel\",\"namespace\":\"com.drink.ordering.system.infrastructure.kafka.order.avro.model\",\"fields\":[{\"name\":\"orderId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"drinkType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"drinkAdditions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"orderStatus\",\"type\":{\"type\":\"enum\",\"name\":\"OrderStatus\",\"symbols\":[\"PLACED\",\"CANCELLED\",\"FINISHED\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OrderAvroModel> ENCODER =
      new BinaryMessageEncoder<OrderAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderAvroModel> DECODER =
      new BinaryMessageDecoder<OrderAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OrderAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String orderId;
  private java.lang.String drinkType;
  private java.util.List<java.lang.String> drinkAdditions;
  private com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderStatus orderStatus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderAvroModel() {}

  /**
   * All-args constructor.
   * @param orderId The new value for orderId
   * @param drinkType The new value for drinkType
   * @param drinkAdditions The new value for drinkAdditions
   * @param orderStatus The new value for orderStatus
   */
  public OrderAvroModel(java.lang.String orderId, java.lang.String drinkType, java.util.List<java.lang.String> drinkAdditions, com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderStatus orderStatus) {
    this.orderId = orderId;
    this.drinkType = drinkType;
    this.drinkAdditions = drinkAdditions;
    this.orderStatus = orderStatus;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return drinkType;
    case 2: return drinkAdditions;
    case 3: return orderStatus;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = value$ != null ? value$.toString() : null; break;
    case 1: drinkType = value$ != null ? value$.toString() : null; break;
    case 2: drinkAdditions = (java.util.List<java.lang.String>)value$; break;
    case 3: orderStatus = (com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderStatus)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return The value of the 'orderId' field.
   */
  public java.lang.String getOrderId() {
    return orderId;
  }


  /**
   * Sets the value of the 'orderId' field.
   * @param value the value to set.
   */
  public void setOrderId(java.lang.String value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'drinkType' field.
   * @return The value of the 'drinkType' field.
   */
  public java.lang.String getDrinkType() {
    return drinkType;
  }


  /**
   * Sets the value of the 'drinkType' field.
   * @param value the value to set.
   */
  public void setDrinkType(java.lang.String value) {
    this.drinkType = value;
  }

  /**
   * Gets the value of the 'drinkAdditions' field.
   * @return The value of the 'drinkAdditions' field.
   */
  public java.util.List<java.lang.String> getDrinkAdditions() {
    return drinkAdditions;
  }


  /**
   * Sets the value of the 'drinkAdditions' field.
   * @param value the value to set.
   */
  public void setDrinkAdditions(java.util.List<java.lang.String> value) {
    this.drinkAdditions = value;
  }

  /**
   * Gets the value of the 'orderStatus' field.
   * @return The value of the 'orderStatus' field.
   */
  public com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderStatus getOrderStatus() {
    return orderStatus;
  }


  /**
   * Sets the value of the 'orderStatus' field.
   * @param value the value to set.
   */
  public void setOrderStatus(com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderStatus value) {
    this.orderStatus = value;
  }

  /**
   * Creates a new OrderAvroModel RecordBuilder.
   * @return A new OrderAvroModel RecordBuilder
   */
  public static com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder newBuilder() {
    return new com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder();
  }

  /**
   * Creates a new OrderAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderAvroModel RecordBuilder
   */
  public static com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder newBuilder(com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder other) {
    if (other == null) {
      return new com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder();
    } else {
      return new com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new OrderAvroModel RecordBuilder by copying an existing OrderAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new OrderAvroModel RecordBuilder
   */
  public static com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder newBuilder(com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel other) {
    if (other == null) {
      return new com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder();
    } else {
      return new com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderAvroModel>
    implements org.apache.avro.data.RecordBuilder<OrderAvroModel> {

    private java.lang.String orderId;
    private java.lang.String drinkType;
    private java.util.List<java.lang.String> drinkAdditions;
    private com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderStatus orderStatus;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.drinkType)) {
        this.drinkType = data().deepCopy(fields()[1].schema(), other.drinkType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.drinkAdditions)) {
        this.drinkAdditions = data().deepCopy(fields()[2].schema(), other.drinkAdditions);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.orderStatus)) {
        this.orderStatus = data().deepCopy(fields()[3].schema(), other.orderStatus);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.drinkType)) {
        this.drinkType = data().deepCopy(fields()[1].schema(), other.drinkType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.drinkAdditions)) {
        this.drinkAdditions = data().deepCopy(fields()[2].schema(), other.drinkAdditions);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.orderStatus)) {
        this.orderStatus = data().deepCopy(fields()[3].schema(), other.orderStatus);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'orderId' field.
      * @return The value.
      */
    public java.lang.String getOrderId() {
      return orderId;
    }


    /**
      * Sets the value of the 'orderId' field.
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder setOrderId(java.lang.String value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderId' field.
      * @return This builder.
      */
    public com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'drinkType' field.
      * @return The value.
      */
    public java.lang.String getDrinkType() {
      return drinkType;
    }


    /**
      * Sets the value of the 'drinkType' field.
      * @param value The value of 'drinkType'.
      * @return This builder.
      */
    public com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder setDrinkType(java.lang.String value) {
      validate(fields()[1], value);
      this.drinkType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'drinkType' field has been set.
      * @return True if the 'drinkType' field has been set, false otherwise.
      */
    public boolean hasDrinkType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'drinkType' field.
      * @return This builder.
      */
    public com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder clearDrinkType() {
      drinkType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'drinkAdditions' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getDrinkAdditions() {
      return drinkAdditions;
    }


    /**
      * Sets the value of the 'drinkAdditions' field.
      * @param value The value of 'drinkAdditions'.
      * @return This builder.
      */
    public com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder setDrinkAdditions(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.drinkAdditions = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'drinkAdditions' field has been set.
      * @return True if the 'drinkAdditions' field has been set, false otherwise.
      */
    public boolean hasDrinkAdditions() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'drinkAdditions' field.
      * @return This builder.
      */
    public com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder clearDrinkAdditions() {
      drinkAdditions = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderStatus' field.
      * @return The value.
      */
    public com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderStatus getOrderStatus() {
      return orderStatus;
    }


    /**
      * Sets the value of the 'orderStatus' field.
      * @param value The value of 'orderStatus'.
      * @return This builder.
      */
    public com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder setOrderStatus(com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderStatus value) {
      validate(fields()[3], value);
      this.orderStatus = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'orderStatus' field has been set.
      * @return True if the 'orderStatus' field has been set, false otherwise.
      */
    public boolean hasOrderStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'orderStatus' field.
      * @return This builder.
      */
    public com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderAvroModel.Builder clearOrderStatus() {
      orderStatus = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderAvroModel build() {
      try {
        OrderAvroModel record = new OrderAvroModel();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.String) defaultValue(fields()[0]);
        record.drinkType = fieldSetFlags()[1] ? this.drinkType : (java.lang.String) defaultValue(fields()[1]);
        record.drinkAdditions = fieldSetFlags()[2] ? this.drinkAdditions : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.orderStatus = fieldSetFlags()[3] ? this.orderStatus : (com.drink.ordering.system.infrastructure.kafka.order.avro.model.OrderStatus) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<OrderAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










